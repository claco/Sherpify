Requirements:
  - if the payment is for a physical product, generate a packing slip
  - if the payment is for a book, create a duplicate packing slip for the royalty department
  - if the payment is for a membership, email the owner and inform then of the activation/upgrade

Assumptions:
  - the order is already in the system and payment has been received
  - the order contains a single product
  - the order is paid in full and shipped all at once in a single box
  - the packing slip just lists the product and quantity
  - the packing slip is a simple text file
  - the rules must be implemented by a programmer

Exclusions:
  - delivery of the packing slip to shipping is out of scope
  - fancy packing slip format is out of scope (pdf/html)
  - activation/upgrade of membership/credentials is out of scope (see Brainstorming)
  - we will not accept orders with different product types in the same order initially
  - we will not split multiple items into multiple boxes with multiple packing slips 
  - order entry/business people can not add rules themselves via DSL

Brainstorming:

  - this appears to be a slim version of Kata 16: Business Rules Kata, which breaks the membership
    product into activation, upgrade, and notification, along with a list of rules that probably
    change the approach to something more complex
    
  - as katas are about focusing on the problem described and not about solving all variants of that
    problem, should we focus on the literal: single payment for a single product on a single order?

  - the requirements say "focus on payments", but this is really order processing->shipping. That
    seems to imply a process long after the payment is applied, again on the order as a whole?

  - I have too much experience with complex business order rules. Must not over engineer.

  - what order rules might emerge?
    - BoGo?
    - A-B-Free?
    - %10 discount on x
    - royalties/payments/percentages to 3rd parties

  - entities? Product, Order, OrderItem, PackingSlip, MembershipNotification

  - real world order items are usual snapshot copies, not fks to products: ignoring for scope

  - type/inheritance Book, vs attributes. what it there are thousands of types instead of 10? too many classes?
    single table inherit. vs multiple table has_a -> is_a w/method_missing proxy. Too complex for this kata, but
    something to keep in mind depending width of the product base: enscapsulate under props and move on

  - testing: outcome vs. code. don't test rails/ar vs. behavior

  - process an order in bite sized testable chunks. Stack/Pipeline?
    - rules in fifo, perform actions and/or alter order
    - easy to add more/remove

  - services? OrderProcessor, Rule, SlipGenerator

  - experience/workflow
    - on accepted, paid order detail page
    - "process order"
    - gemerate slips
    - send member emails
    - "Order processed successfully"

  - requirements and even features assume we're viewing an order. likely a separate feature. Add that
    once the initial features work. somewhat ouf of scope.
